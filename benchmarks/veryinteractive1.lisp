(define (fib n) (if (< n 2) n (+ (fib (- n 1)) (fib (- n 2)))))
(define (f x) (
	let ((y (fib x)))
	(do
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(+ y 1)
		(+ y 1)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(fib 30)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(read-num)
		(- (add1 y) 1)
		2
	)
))
(print (f 30))